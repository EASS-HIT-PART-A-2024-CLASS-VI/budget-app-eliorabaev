import google.generativeai as genai
from dotenv import load_dotenv
import os
import logging

# Load environment variables
load_dotenv()
GEMINI_API_KEY = os.getenv("GEMINI_API_KEY")

if not GEMINI_API_KEY:
    raise EnvironmentError("GEMINI_API_KEY is not set. Please configure it in the .env file.")

# Configure logging
logger = logging.getLogger(__name__)
logging.basicConfig(level=logging.DEBUG)

# Configure Gemini API
genai.configure(api_key=GEMINI_API_KEY)

async def get_suggestions(data: dict):
    """
    Sends user financial data to Gemini AI via the google.generativeai library and fetches suggestions.
    """
    try:
        logger.debug(f"Received data for suggestion generation: {data}")

        # Extract user_data fields
        user_data = data.get("user_data", {})
        if not all(key in user_data for key in ["balance_id", "current_balance", "total_income", "total_expense"]):
            raise ValueError("Missing required fields in user_data")

        # Prepare the prompt
        prompt = (
            f"Based on the user's financial data, provide detailed, actionable, and personalized suggestions:\n\n"
            f"Balance ID: {user_data['balance_id']}\n"
            f"Current Balance: ${user_data['current_balance']}\n"
            f"Total Income: ${user_data['total_income']}\n"
            f"Total Expense: ${user_data['total_expense']}\n\n"
            "Suggestions should include:\n"
            "1. Analysis of the user's financial situation.\n"
            "2. Steps to optimize savings and investments.\n"
            "3. Strategies to reduce expenses or increase income.\n\n"
            "Be concise and end with motivational advice."
        )

        # Generate content using Gemini AI
        model = genai.GenerativeModel(model_name="gemini-1.5-flash")
        response = model.generate_content(prompt)

        # Return suggestions
        if response and hasattr(response, "text"):
            return {"suggestions": response.text}
        else:
            logger.error(f"Invalid Gemini response: {response}")
            return {"error": "No suggestions generated by the Gemini API"}

    except Exception as e:
        logger.error(f"Gemini API error: {str(e)}")
        return {"error": f"Gemini API error: {str(e)}"}
