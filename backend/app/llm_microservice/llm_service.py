import google.generativeai as genai
from dotenv import load_dotenv
import os

# Load environment variables from the .env file
load_dotenv()

# Fetch the Gemini API key securely
GEMINI_API_KEY = os.getenv("GEMINI_API_KEY")

if not GEMINI_API_KEY:
    raise EnvironmentError("GEMINI_API_KEY is not set. Please configure it in the .env file.")

# Configure the Gemini AI client
genai.configure(api_key=GEMINI_API_KEY)

async def get_suggestions(data: dict):
    """
    Sends user financial data to Gemini AI via the google.generativeai library and fetches suggestions.
    """
    try:
        # Prepare the prompt
        prompt = (
            "You are a financial advisor assistant. Based on the user's financial data provided below, "
            "analyze their financial situation and provide the most detailed, actionable, and personalized "
            "suggestions for the user to improve their financial health.\n\n"
            "Consider the following factors:\n"
            "1. Current balance: Evaluate whether the user has enough savings, and provide advice on how to grow "
            "or utilize this balance effectively.\n"
            "2. Total income: Suggest ways to maximize or diversify income streams based on the provided income amount.\n"
            "3. Total expense: Provide strategies to optimize or reduce expenses and identify potential areas for savings.\n\n"
            "User Data:\n"
            f"- Balance ID: {data['balance_id']}\n"
            f"- Current Balance: ${data['current_balance']}\n"
            f"- Total Income: ${data['total_income']}\n"
            f"- Total Expense: ${data['total_expense']}\n\n"
            "Your response should:\n"
            "1. Start with a high-level analysis of the user's financial situation.\n"
            "2. Offer specific suggestions for each category: balance, income, and expense.\n"
            "3. Include practical steps the user can take to achieve financial improvement.\n\n"
            "Be concise, yet informative and actionable. End with encouragement or a positive note to keep the user motivated."
        )

        # Generate content using the Gemini model
        model = genai.GenerativeModel(model_name="gemini-1.5-flash")
        response = model.generate_content(
            prompt,
            generation_config=genai.GenerationConfig(
                max_output_tokens=500,
                temperature=0.7
            )
        )

        # Extract and return suggestions
        if response and hasattr(response, "text"):
            return {"suggestions": response.text}
        else:
            return {"error": "No suggestions generated by the Gemini AI."}

    except Exception as e:
        # Handle errors gracefully
        return {"error": f"Gemini API error: {str(e)}"}
