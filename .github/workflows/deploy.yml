name: Deploy to AWS

on:
  push:
    branches: [ main ]
  workflow_dispatch:  # Allow manual trigger

permissions:
  id-token: write 
  contents: read 

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Configure AWS credentials with OIDC
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/GitHubActionsOIDCRole-BudgetApp
          aws-region: eu-north-1
      
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      # Install Docker Compose
      - name: Install Docker Compose
        run: |
          sudo curl -L "https://github.com/docker/compose/releases/download/v2.20.3/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
          sudo chmod +x /usr/local/bin/docker-compose
          docker-compose --version
      
      # Stop containers on EC2 via SSM
      - name: First stop running containers on EC2
        run: |
          # Run SSM command to stop containers
          aws ssm send-command \
            --instance-ids ${{ secrets.EC2_INSTANCE_ID }} \
            --document-name "AWS-RunShellScript" \
            --parameters '{"commands":["cd ~/budget-app-eliorabaev && docker-compose -f docker-compose.ecr.yml down || true && echo \"All containers stopped\""]}' \
            --output text
          
          # Give some time for the command to complete
          sleep 10
      
      - name: Build, tag, and push images to ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        run: |
          # Create temporary .env file for build
          mkdir -p backend/app/llm_microservice
          echo "GEMINI_API_KEY=dummy-value-for-build" > backend/app/llm_microservice/.env
          
          # Build images
          docker-compose build
          
          # Tag images with latest and git SHA for versioning
          docker tag budget-app-eliorabaev-backend:latest $ECR_REGISTRY/budget-app-backend:latest
          docker tag budget-app-eliorabaev-frontend:latest $ECR_REGISTRY/budget-app-frontend:latest
          docker tag budget-app-eliorabaev-llm_microservice:latest $ECR_REGISTRY/budget-app-llm:latest
          docker tag budget-app-eliorabaev-graph_microservice:latest $ECR_REGISTRY/budget-app-graph:latest
          
          docker tag budget-app-eliorabaev-backend:latest $ECR_REGISTRY/budget-app-backend:${{ github.sha }}
          docker tag budget-app-eliorabaev-frontend:latest $ECR_REGISTRY/budget-app-frontend:${{ github.sha }}
          docker tag budget-app-eliorabaev-llm_microservice:latest $ECR_REGISTRY/budget-app-llm:${{ github.sha }}
          docker tag budget-app-eliorabaev-graph_microservice:latest $ECR_REGISTRY/budget-app-graph:${{ github.sha }}
          
          # Push all images
          docker push $ECR_REGISTRY/budget-app-backend:latest
          docker push $ECR_REGISTRY/budget-app-frontend:latest
          docker push $ECR_REGISTRY/budget-app-llm:latest
          docker push $ECR_REGISTRY/budget-app-graph:latest
          
          docker push $ECR_REGISTRY/budget-app-backend:${{ github.sha }}
          docker push $ECR_REGISTRY/budget-app-frontend:${{ github.sha }}
          docker push $ECR_REGISTRY/budget-app-llm:${{ github.sha }}
          docker push $ECR_REGISTRY/budget-app-graph:${{ github.sha }}
      
      # Deploy via SSM
      - name: Deploy to EC2
        run: |
          # Send the command and capture its ID
          COMMAND_ID=$(aws ssm send-command \
            --instance-ids ${{ secrets.EC2_INSTANCE_ID }} \
            --document-name "AWS-RunShellScript" \
            --parameters '{"commands":["cd ~/budget-app-eliorabaev", "git pull", "chmod +x ./deploy-from-ecr.sh", "./deploy-from-ecr.sh", "docker ps"]}' \
            --output json | jq -r '.Command.CommandId')
          
          echo "Started deployment with command ID: $COMMAND_ID"
          
          # Poll until command completes or fails
          STATUS="InProgress"
          while [ "$STATUS" = "InProgress" ] || [ "$STATUS" = "Pending" ]; do
            echo "Waiting for command to complete... Current status: $STATUS"
            sleep 10
            
            # Get the current status
            STATUS=$(aws ssm get-command-invocation \
              --command-id "$COMMAND_ID" \
              --instance-id ${{ secrets.EC2_INSTANCE_ID }} \
              --query "Status" --output text || echo "Failed to get status")
          done
          
          # Check the final status
          if [ "$STATUS" = "Success" ]; then
            echo "Deployment completed successfully!"
            
            # Display the command output
            aws ssm get-command-invocation \
              --command-id "$COMMAND_ID" \
              --instance-id ${{ secrets.EC2_INSTANCE_ID }} \
              --query "StandardOutputContent" --output text
          else
            echo "Deployment failed with status: $STATUS"
            
            # Display error output
            aws ssm get-command-invocation \
              --command-id "$COMMAND_ID" \
              --instance-id ${{ secrets.EC2_INSTANCE_ID }} \
              --query "StandardErrorContent" --output text
            
            # Fail the GitHub Action
            exit 1
          fi