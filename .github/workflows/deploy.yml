name: Deploy to AWS

on:
  push:
    branches: [ main ]
  workflow_dispatch:  # Allow manual trigger

permissions:
  id-token: write 
  contents: read 

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Configure AWS credentials with OIDC
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/GitHubActionsOIDCRole-BudgetApp
          aws-region: eu-north-1
      
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      # Install Docker Compose
      - name: Install Docker Compose
        run: |
          sudo curl -L "https://github.com/docker/compose/releases/download/v2.20.3/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
          sudo chmod +x /usr/local/bin/docker-compose
          docker-compose --version
      
      # First stop running containers on EC2 via SSM
      - name: Stop running containers on EC2
        run: |
          # Send command and capture ID
          COMMAND_ID=$(aws ssm send-command \
            --instance-ids ${{ secrets.EC2_INSTANCE_ID }} \
            --document-name "AWS-RunShellScript" \
            --parameters '{"commands":[
              "cd /home/ubuntu/budget-app-eliorabaev && docker-compose -f docker-compose.ecr.yml down || true",
              "echo \"All containers stopped\""
            ]}' \
            --output json | jq -r '.Command.CommandId')
          
          echo "Started container stopping with command ID: $COMMAND_ID"
          
          # Poll until command completes
          STATUS="InProgress"
          while [ "$STATUS" = "InProgress" ] || [ "$STATUS" = "Pending" ]; do
            echo "Waiting for stop command to complete... Current status: $STATUS"
            sleep 5
            
            STATUS=$(aws ssm get-command-invocation \
              --command-id "$COMMAND_ID" \
              --instance-id ${{ secrets.EC2_INSTANCE_ID }} \
              --query "Status" --output text || echo "Failed to get status")
          done
          
          if [ "$STATUS" = "Success" ]; then
            echo "Successfully stopped containers. Output:"
            aws ssm get-command-invocation \
              --command-id "$COMMAND_ID" \
              --instance-id ${{ secrets.EC2_INSTANCE_ID }} \
              --query "StandardOutputContent" --output text
          else
            echo "Warning: Command completed with status: $STATUS. Error output:"
            aws ssm get-command-invocation \
              --command-id "$COMMAND_ID" \
              --instance-id ${{ secrets.EC2_INSTANCE_ID }} \
              --query "StandardErrorContent" --output text
            # Not failing the build since the directory might not exist yet on first run
          fi
      
      - name: Build, tag, and push images to ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        run: |
          # Create temporary .env file for build
          mkdir -p backend/app/llm_microservice
          echo "GEMINI_API_KEY=dummy-value-for-build" > backend/app/llm_microservice/.env
          
          # Build images
          docker-compose build
          
          # Tag images with latest and git SHA for versioning
          docker tag budget-app-eliorabaev-backend:latest $ECR_REGISTRY/budget-app-backend:latest
          docker tag budget-app-eliorabaev-frontend:latest $ECR_REGISTRY/budget-app-frontend:latest
          docker tag budget-app-eliorabaev-llm_microservice:latest $ECR_REGISTRY/budget-app-llm:latest
          docker tag budget-app-eliorabaev-graph_microservice:latest $ECR_REGISTRY/budget-app-graph:latest
          
          docker tag budget-app-eliorabaev-backend:latest $ECR_REGISTRY/budget-app-backend:${{ github.sha }}
          docker tag budget-app-eliorabaev-frontend:latest $ECR_REGISTRY/budget-app-frontend:${{ github.sha }}
          docker tag budget-app-eliorabaev-llm_microservice:latest $ECR_REGISTRY/budget-app-llm:${{ github.sha }}
          docker tag budget-app-eliorabaev-graph_microservice:latest $ECR_REGISTRY/budget-app-graph:${{ github.sha }}
          
          # Push all images
          docker push $ECR_REGISTRY/budget-app-backend:latest
          docker push $ECR_REGISTRY/budget-app-frontend:latest
          docker push $ECR_REGISTRY/budget-app-llm:latest
          docker push $ECR_REGISTRY/budget-app-graph:latest
          
          docker push $ECR_REGISTRY/budget-app-backend:${{ github.sha }}
          docker push $ECR_REGISTRY/budget-app-frontend:${{ github.sha }}
          docker push $ECR_REGISTRY/budget-app-llm:${{ github.sha }}
          docker push $ECR_REGISTRY/budget-app-graph:${{ github.sha }}
      
      # Deploy via SSM with proper path and polling
      - name: Deploy to EC2
        run: |
          # Send command and capture ID
          COMMAND_ID=$(aws ssm send-command \
            --instance-ids ${{ secrets.EC2_INSTANCE_ID }} \
            --document-name "AWS-RunShellScript" \
            --parameters '{"commands":[
              "cd /home/ubuntu/budget-app-eliorabaev", 
              "git pull",
              "chmod +x ./deploy-from-ecr.sh",
              "./deploy-from-ecr.sh",
              "docker ps"
            ]}' \
            --output json | jq -r '.Command.CommandId')
          
          echo "Started deployment with command ID: $COMMAND_ID"
          
          # Poll until command completes
          STATUS="InProgress"
          ATTEMPTS=0
          MAX_ATTEMPTS=12  # 2 minutes (12 * 10 seconds)
          
          while [ "$STATUS" = "InProgress" ] || [ "$STATUS" = "Pending" ]; do
            echo "Waiting for deployment command to complete... Current status: $STATUS"
            sleep 10
            
            ATTEMPTS=$((ATTEMPTS+1))
            if [ $ATTEMPTS -ge $MAX_ATTEMPTS ]; then
              echo "Timed out waiting for command to complete"
              exit 1
            fi
            
            STATUS=$(aws ssm get-command-invocation \
              --command-id "$COMMAND_ID" \
              --instance-id ${{ secrets.EC2_INSTANCE_ID }} \
              --query "Status" --output text || echo "Failed to get status")
          done
          
          # Check the final status
          if [ "$STATUS" = "Success" ]; then
            echo "Deployment completed successfully! Output:"
            aws ssm get-command-invocation \
              --command-id "$COMMAND_ID" \
              --instance-id ${{ secrets.EC2_INSTANCE_ID }} \
              --query "StandardOutputContent" --output text
          else
            echo "Deployment failed with status: $STATUS. Error output:"
            aws ssm get-command-invocation \
              --command-id "$COMMAND_ID" \
              --instance-id ${{ secrets.EC2_INSTANCE_ID }} \
              --query "StandardErrorContent" --output text
            exit 1
          fi