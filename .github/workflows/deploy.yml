name: Deploy to AWS ECR and EC2

on:
  pull_request:
    types: [closed]
    branches: [ main ]
    paths:
      - 'backend/**'
      - 'frontend/**'
      - 'nginx/**'
      - 'docker-compose*.yml'
      - '.github/workflows/deploy.yml'
  workflow_dispatch:

concurrency:
  group: deploy-to-production
  cancel-in-progress: true

permissions:
  id-token: write 
  contents: read 

jobs:
  should-deploy:
    runs-on: ubuntu-latest
    if: github.event.pull_request.merged == true || github.event_name == 'workflow_dispatch'
    outputs:
      deploy: ${{ steps.check.outputs.should_deploy }}
    steps:
      - name: Check if should deploy
        id: check
        run: |
          echo "should_deploy=true" >> $GITHUB_OUTPUT
          echo "‚úÖ Deployment approved - PR was merged or manually triggered"

  deploy:
    needs: should-deploy
    if: needs.should-deploy.outputs.deploy == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Configure AWS credentials with OIDC
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/GitHubActionsOIDCRole-BudgetApp
          aws-region: eu-north-1
      
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Install Docker Compose
        run: |
          sudo curl -L "https://github.com/docker/compose/releases/download/v2.20.3/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
          sudo chmod +x /usr/local/bin/docker-compose
          docker-compose --version

      - name: Cache Docker layers
        uses: actions/cache@v4
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Stop running containers on EC2
        run: |
          echo "üõë Stopping running containers..."
          COMMAND_ID=$(aws ssm send-command \
            --instance-ids ${{ secrets.EC2_INSTANCE_ID }} \
            --document-name "AWS-RunShellScript" \
            --parameters '{"commands":[
              "cd /home/ubuntu/budget-app-eliorabaev && docker-compose -f docker-compose.ecr.yml down || true",
              "echo \"All containers stopped\""
            ]}' \
            --output text --query "Command.CommandId")
          
          echo "Started container stopping with command ID: $COMMAND_ID"
          
          # Use AWS CLI wait command instead of manual polling
          echo "‚è≥ Waiting for containers to stop..."
          aws ssm wait command-executed \
            --command-id "$COMMAND_ID" \
            --instance-id ${{ secrets.EC2_INSTANCE_ID }} \
            --cli-read-timeout 120 || echo "Warning: Stop command timeout, continuing..."
          
          echo "‚úÖ Container stop command completed"

      - name: Build, tag, and push images to ECR with caching
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          DOCKER_BUILDKIT: 1
          COMPOSE_DOCKER_CLI_BUILD: 1
        run: |
          echo "üîß Preparing build environment..."
          mkdir -p backend/app/llm_microservice
          echo "GEMINI_API_KEY=dummy-value-for-build" > backend/app/llm_microservice/.env
          
          echo "üèóÔ∏è Building images with docker-compose (with caching)..."
          export BUILDX_CACHE_FROM="type=local,src=/tmp/.buildx-cache"
          export BUILDX_CACHE_TO="type=local,dest=/tmp/.buildx-cache-new,mode=max"
          
          docker-compose build
          
          echo "üè∑Ô∏è Tagging images..."
          docker tag budget-app-eliorabaev-backend:latest $ECR_REGISTRY/budget-app-backend:latest
          docker tag budget-app-eliorabaev-frontend:latest $ECR_REGISTRY/budget-app-frontend:latest
          docker tag budget-app-eliorabaev-llm_microservice:latest $ECR_REGISTRY/budget-app-llm:latest
          docker tag budget-app-eliorabaev-graph_microservice:latest $ECR_REGISTRY/budget-app-graph:latest
          
          docker tag budget-app-eliorabaev-backend:latest $ECR_REGISTRY/budget-app-backend:${{ github.sha }}
          docker tag budget-app-eliorabaev-frontend:latest $ECR_REGISTRY/budget-app-frontend:${{ github.sha }}
          docker tag budget-app-eliorabaev-llm_microservice:latest $ECR_REGISTRY/budget-app-llm:${{ github.sha }}
          docker tag budget-app-eliorabaev-graph_microservice:latest $ECR_REGISTRY/budget-app-graph:${{ github.sha }}
          
          echo "üì§ Pushing images to ECR..."
          (docker push $ECR_REGISTRY/budget-app-backend:latest &)
          (docker push $ECR_REGISTRY/budget-app-frontend:latest &)
          (docker push $ECR_REGISTRY/budget-app-llm:latest &)
          (docker push $ECR_REGISTRY/budget-app-graph:latest &)
          wait
          
          echo "üì§ Pushing SHA-tagged images..."
          (docker push $ECR_REGISTRY/budget-app-backend:${{ github.sha }} &)
          (docker push $ECR_REGISTRY/budget-app-frontend:${{ github.sha }} &)
          (docker push $ECR_REGISTRY/budget-app-llm:${{ github.sha }} &)
          (docker push $ECR_REGISTRY/budget-app-graph:${{ github.sha }} &)
          wait
          echo "‚úÖ All images built and pushed successfully"

      - name: Move cache
        run: |
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache || true

      - name: Deploy to EC2
        run: |
          echo "üöÄ Starting deployment to EC2..."
          COMMAND_ID=$(aws ssm send-command \
            --instance-ids ${{ secrets.EC2_INSTANCE_ID }} \
            --document-name "AWS-RunShellScript" \
            --parameters '{
              "commands":[
                "cd /home/ubuntu/budget-app-eliorabaev",
                "echo \"üì• Pulling latest code...\"",
                "git pull",
                "echo \"üîß Making deploy script executable...\"", 
                "chmod +x ./deploy-from-ecr.sh",
                "echo \"üöÄ Running deployment...\"",
                "./deploy-from-ecr.sh",
                "echo \"‚úÖ Deployment completed, checking containers...\"",
                "docker ps",
                "echo \"üéâ Deployment finished successfully!\""
              ]
            }' \
            --output text --query "Command.CommandId")
          
          if [ -z "$COMMAND_ID" ]; then
            echo "‚ùå Failed to get Command ID from send-command operation."
            exit 1
          fi
          
          echo "Started deployment with command ID: $COMMAND_ID"
          
          # Use AWS CLI wait with longer timeout for deployment
          echo "‚è≥ Waiting for deployment to complete (max 5 minutes)..."
          aws ssm wait command-executed \
            --command-id "$COMMAND_ID" \
            --instance-id ${{ secrets.EC2_INSTANCE_ID }} \
            --cli-read-timeout 300
          
          # Get the final status and output
          STATUS=$(aws ssm get-command-invocation \
            --command-id "$COMMAND_ID" \
            --instance-id ${{ secrets.EC2_INSTANCE_ID }} \
            --query "Status" --output text)
          
          if [ "$STATUS" = "Success" ]; then
            echo "üéâ Deployment completed successfully! Output:"
            aws ssm get-command-invocation \
              --command-id "$COMMAND_ID" \
              --instance-id ${{ secrets.EC2_INSTANCE_ID }} \
              --query "StandardOutputContent" --output text
          else
            echo "‚ùå Deployment failed with status: $STATUS. Error output:"
            aws ssm get-command-invocation \
              --command-id "$COMMAND_ID" \
              --instance-id ${{ secrets.EC2_INSTANCE_ID }} \
              --query "StandardErrorContent" --output text
            exit 1
          fi

      - name: Post-deployment health check
        run: |
          echo "üîç Waiting 30 seconds for services to stabilize..."
          sleep 30
          echo "‚úÖ Deployment workflow completed successfully!"